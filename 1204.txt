import cv2
import numpy as np
import pytesseract

import smbus2 as smbus
import RPi.GPIO as GPIO
import time
import pigpio
import os
import tkinter as ti
import tkinter.font

import mysql.connector
#delete  from area_info where area_no = 5;

# 이 코드의 현재 기능
# 차량이 들어오면 IR센서, 카메라 인식 + 차단기 열림
# 인식된 차번호 데이터 베이스에 저장
#저장된 정보 gui(tkinter) + LCD로 출력

# 수정사항 ~11.13
# 439, 441번 라인에 사용된 이미지 파일명을 test_image 에서 rec_image로 바꿈
# tkinter 라이브러리를 사용해서 gui를 설계함
# camcam = cv2.VideoCapture(0)

#메인함수 도입부 : 444
#차량 입장 인식 : 700
#차량 퇴장 인식 : 980
servo_set = 2400
def sleep():
    time.sleep(3)
    

# webcam.set(cv2.CAP_PROP_FRAME_WIDTH,640)
# webcam.set(cv2.CAP_PROP_FRAME_HEIGHT,480)

#DB connect
parking_db = mysql.connector.connect(  
    host="localhost",
    user="manager",
    password="1402",
    database="parking"  
)

cursor = parking_db.cursor()

#######################################################################

# IR 송수신 모듈 핀 설정
isp = 9  # GPIO 핀 번호 (센서 핀)
osp = 11

# 서보 모터 핀 설정
servo_pin = 8  # GPIO 핀 번호 (서보 모터 핀) 
servo_pwm_frequency = 50  # 서보 모터 PWM 주파수 (보통 50Hz)

# 서보 모터 초기 설정
initial_servo_position = 0  # 초기 서보 모터 위치 (0도)

# GPIO 초기화
GPIO.setmode(GPIO.BCM)
GPIO.setup(isp, GPIO.IN)
GPIO.setup(osp, GPIO.IN)

# pigpio 초기화 및 서보 모터 설정
pi = pigpio.pi()
pi.set_PWM_frequency(servo_pin, servo_pwm_frequency)
pi.set_servo_pulsewidth(servo_pin, 2050)  # 초기 위치 설정 (1500us = 0도)

#LCD PART
BUS = smbus.SMBus(1)

def write_word(addr, data):
    global BLEN
    temp = data
    if BLEN == 1:
        temp |= 0x08
    else:
        temp &= 0xF7
    BUS.write_byte(addr ,temp)

def send_command(comm):
    # Send bit7-4 firstly
    buf = comm & 0xF0
    buf |= 0x04               # RS = 0, RW = 0, EN = 1
    write_word(LCD_ADDR ,buf)
    time.sleep(0.002)
    buf &= 0xFB               # Make EN = 0
    write_word(LCD_ADDR ,buf)

    # Send bit3-0 secondly
    buf = (comm & 0x0F) << 4
    buf |= 0x04               # RS = 0, RW = 0, EN = 1
    write_word(LCD_ADDR ,buf)
    time.sleep(0.002)
    buf &= 0xFB               # Make EN = 0
    write_word(LCD_ADDR ,buf)

def send_data(data):
    # Send bit7-4 firstly
    buf = data & 0xF0
    buf |= 0x05               # RS = 1, RW = 0, EN = 1
    write_word(LCD_ADDR ,buf)
    time.sleep(0.002)
    buf &= 0xFB               # Make EN = 0
    write_word(LCD_ADDR ,buf)

    # Send bit3-0 secondly
    buf = (data & 0x0F) << 4
    buf |= 0x05               # RS = 1, RW = 0, EN = 1
    write_word(LCD_ADDR ,buf)
    time.sleep(0.002)
    buf &= 0xFB               # Make EN = 0
    write_word(LCD_ADDR ,buf)

def init(addr, bl):
#	global BUS
#	BUS = smbus.SMBus(1)
    global LCD_ADDR
    global BLEN
    LCD_ADDR = addr
    BLEN = bl
    try:
        send_command(0x33) # Must initialize to 8-line mode at first
        time.sleep(0.005)
        send_command(0x32) # Then initialize to 4-line mode
        time.sleep(0.005)
        send_command(0x28) # 2 Lines & 5*7 dots
        time.sleep(0.005)
        send_command(0x0C) # Enable display without cursor
        time.sleep(0.005)
        send_command(0x01) # Clear Screen
        BUS.write_byte(LCD_ADDR, 0x08)
    except:
        return False
    else:
        return True

def clear():
    send_command(0x01) # Clear Screen

def openlight():  # Enable the backlight
    BUS.write_byte(0x27,0x08)
    BUS.close()

def write(x, y, str):
    if x < 0:
        x = 0
    if x > 19:
        x = 19
    if y <0:
        y = 0
    if y > 3:
        y = 3

    # Move cursor
    row_offsets = [0x00, 0x40, 0x14, 0x54]
    addr = 0x80 + row_offsets[y] + x
    send_command(addr)

    for chr in str:
        send_data(ord(chr))

#gui By tkinter
        
# def ti_loop(current):
#     if current == 4:
#         display = "현재 : " + str(current) + "/ 4" + "\n 빈 주차공간이 없습니다."
#         gui_label.config(text=display)
#         gui.after(1000,ti_loop)
#         
#     else:
#         display = "현재 : " + str(current) + "/ 4"
#         gui_label.config(text=display)
#         gui.after(1000,ti_loop)


#gui = ti.Tk()
#gui.title("주차공간 현황")
#gui.geometry("400x300")
#gui.resizable(True,True)

#font = ti.font.Font(size=40)
#gui_label = ti.Label(gui,text=".", font=font)
#gui_label.pack()


####Main Function##########################################
if __name__ == '__main__':		#1~2 번째줄(0, 1)
    init(0x27, 1)				#3~4 번째줄(2, 3)
    carCnt = 0
    nowCar = ''
    now = 1
    cnt = 0
#     webcam = cv2.VideoCapture(1)
    try:
        while True:
#             write(4, 0, 'parking_info') #라인 첫번째 글자는 4부터 시작
#             write(4, 1, '            ')
#             write(4, 2, 'now :'+ str(now)+'/4')    
            
            isp_value = GPIO.input(isp)
            osp_value = GPIO.input(osp)
                
            if isp_value == GPIO.HIGH:  # 장애물이 감지되지 않으면
                pi.set_servo_pulsewidth(servo_pin, servo_set)  # 서보 모터를 0도로 회전
                time.sleep(0.5)
                
            elif isp_value == GPIO.LOW: #장애물이 감지되면        
                webcam = cv2.VideoCapture(0)
                ret, frame = webcam.read()
                cv2.imwrite("test_image.jpg", frame)
                img_ori = cv2.imread("test_image.jpg")
                
                height, width, channel = img_ori.shape
                gray = cv2.cvtColor(img_ori, cv2.COLOR_BGR2GRAY)
                img_blurred = cv2.GaussianBlur(gray, ksize=(5, 5), sigmaX=0)
                img_blur_thresh = cv2.adaptiveThreshold(
                    
                    img_blurred,
                    maxValue=255.0,
                    adaptiveMethod=cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
                    thresholdType=cv2.THRESH_BINARY_INV,
                    blockSize=19,
                    C=9
                )

                img_thresh = cv2.adaptiveThreshold(
                    gray,
                    maxValue=255.0,
                    adaptiveMethod=cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
                    thresholdType=cv2.THRESH_BINARY_INV,
                    blockSize=19,
                    C=9
                )

                contours, _ = cv2.findContours(
                    img_blur_thresh,
                    mode=cv2.RETR_LIST,
                    method=cv2.CHAIN_APPROX_SIMPLE
                )

                temp_result = np.zeros((height, width, channel), dtype=np.uint8)
                cv2.drawContours(temp_result, contours=contours, contourIdx=-1, color=(255,255,255))
                temp_result = np.zeros((height, width, channel), dtype=np.uint8)
                contours_dict = []

                for contour in contours:
                    x, y, w, h = cv2.boundingRect(contour)
                    cv2.rectangle(temp_result, pt1=(x,y), pt2=(x+w, y+h), color=(255,255,255), thickness=2)
                    
                    contours_dict.append({
                        'contour': contour,
                        'x': x,
                        'y': y,
                        'w': w,
                        'h': h,
                        'cx': x + (w / 2),
                        'cy': y + (h / 2)
                    })
                    
                MIN_AREA = 80
                MIN_WIDTH, MIN_HEIGHT=2, 8
                MIN_RATIO, MAX_RATIO = 0.25, 1.0

                possible_contours = []

                cnt = 0
                for d in contours_dict:
                    area = d['w'] * d['h']
                    ratio = d['w'] / d['h']
                    
                    if area > MIN_AREA \
                    and d['w'] > MIN_WIDTH and d['h'] > MIN_HEIGHT \
                    and MIN_RATIO < ratio < MAX_RATIO:
                        d['idx'] = cnt
                        cnt += 1
                        possible_contours.append(d)

                temp_result = np.zeros((height, width, channel), dtype = np.uint8)

                for d in possible_contours:
                    cv2.rectangle(temp_result, pt1=(d['x'], d['y']), pt2=(d['x']+d['w'], d['y']+d['h']), color=(255, 255, 255), thickness=2)
                    
                MAX_DIAG_MULTIPLYER = 5
                MAX_ANGLE_DIFF = 12.0
                MAX_AREA_DIFF = 0.5
                MAX_WIDTH_DIFF = 0.8
                MAX_HEIGHT_DIFF = 0.2
                MIN_N_MATCHED = 3

                def find_chars(contour_list):
                    matched_result_idx = []
                    
                    for d1 in contour_list:
                        matched_contours_idx = []
                        for d2 in contour_list:
                            if d1['idx'] == d2['idx']:
                                continue
                                
                            dx = abs(d1['cx'] - d2['cx'])
                            dy = abs(d1['cy'] - d2['cy'])                            
                            diagonal_length1 = np.sqrt(d1['w'] ** 2 + d1['h'] ** 2)                            
                            distance = np.linalg.norm(np.array([d1['cx'], d1['cy']]) - np.array([d2['cx'], d2['cy']]))
                            if dx == 0:
                                angle_diff = 90
                            else:
                                angle_diff = np.degrees(np.arctan(dy / dx))
                            area_diff = abs(d1['w'] * d1['h'] - d2['w'] * d2['h']) / (d1['w'] * d1['h'])
                            width_diff = abs(d1['w'] - d2['w']) / d1['w']
                            height_diff = abs(d1['h'] - d2['h']) / d1['h']
                            
                            if distance < diagonal_length1 * MAX_DIAG_MULTIPLYER \
                            and angle_diff < MAX_ANGLE_DIFF and area_diff < MAX_AREA_DIFF \
                            and width_diff < MAX_WIDTH_DIFF and height_diff < MAX_HEIGHT_DIFF:
                                matched_contours_idx.append(d2['idx'])
                                
                        matched_contours_idx.append(d1['idx'])
                        
                        if len(matched_contours_idx) < MIN_N_MATCHED:
                            continue
                            
                        matched_result_idx.append(matched_contours_idx)
                        
                        unmatched_contour_idx = []
                        for d4 in contour_list:
                            if d4['idx'] not in matched_contours_idx:
                                unmatched_contour_idx.append(d4['idx'])
                        
                        unmatched_contour = np.take(possible_contours, unmatched_contour_idx)                        
                        recursive_contour_list = find_chars(unmatched_contour)
                        
                        for idx in recursive_contour_list:
                            matched_result_idx.append(idx)                            
                        break                        
                    return matched_result_idx
                result_idx = find_chars(possible_contours)
                matched_result = []
                for idx_list in result_idx:
                    matched_result.append(np.take(possible_contours, idx_list))
                    
                temp_result = np.zeros((height, width, channel), dtype=np.uint8)

                for r in matched_result:
                    for d in r:
                        cv2.rectangle(temp_result, pt1=(d['x'], d['y']), pt2=(d['x']+d['w'], d['y']+d['h']), color=(255,255,255), thickness=2)

                PLATE_WIDTH_PADDING = 1.3 # 1.3
                PLATE_HEIGHT_PADDING = 1.5 # 1.5
                MIN_PLATE_RATIO = 3
                MAX_PLATE_RATIO = 10

                plate_imgs = []
                plate_infos = []

                for i, matched_chars in enumerate(matched_result):
                    sorted_chars = sorted(matched_chars, key=lambda x: x['cx'])

                    plate_cx = (sorted_chars[0]['cx'] + sorted_chars[-1]['cx']) / 2
                    plate_cy = (sorted_chars[0]['cy'] + sorted_chars[-1]['cy']) / 2
                    
                    plate_width = (sorted_chars[-1]['x'] + sorted_chars[-1]['w'] - sorted_chars[0]['x']) * PLATE_WIDTH_PADDING
                    
                    sum_height = 0
                    for d in sorted_chars:
                        sum_height += d['h']

                    plate_height = int(sum_height / len(sorted_chars) * PLATE_HEIGHT_PADDING)
                    
                    triangle_height = sorted_chars[-1]['cy'] - sorted_chars[0]['cy']
                    triangle_hypotenus = np.linalg.norm(
                        np.array([sorted_chars[0]['cx'], sorted_chars[0]['cy']]) - 
                        np.array([sorted_chars[-1]['cx'], sorted_chars[-1]['cy']])
                    )
                    
                    angle = np.degrees(np.arcsin(triangle_height / triangle_hypotenus))                    
                    rotation_matrix = cv2.getRotationMatrix2D(center=(plate_cx, plate_cy), angle=angle, scale=1.0)                    
                    img_rotated = cv2.warpAffine(img_thresh, M=rotation_matrix, dsize=(width, height))                    
                    img_cropped = cv2.getRectSubPix(
                        img_rotated, 
                        patchSize=(int(plate_width), int(plate_height)), 
                        center=(int(plate_cx), int(plate_cy))
                    )
                    
                    if img_cropped.shape[1] / img_cropped.shape[0] < MIN_PLATE_RATIO or img_cropped.shape[1] / img_cropped.shape[0] < MIN_PLATE_RATIO > MAX_PLATE_RATIO:
                        continue
                    
                    plate_imgs.append(img_cropped)
                    plate_infos.append({
                        'x': int(plate_cx - plate_width / 2),
                        'y': int(plate_cy - plate_height / 2),
                        'w': int(plate_width),
                        'h': int(plate_height)
                    })
                    
                longest_idx, longest_text = -1, 0
                plate_chars = []

                for i, plate_img in enumerate(plate_imgs):
                    plate_img = cv2.resize(plate_img, dsize=(0, 0), fx=1.6, fy=1.6)
                    _, plate_img = cv2.threshold(plate_img, thresh=0.0, maxval=255.0, type=cv2.THRESH_BINARY | cv2.THRESH_OTSU)
                    
                    # find contours again (same as above)
                    contours, _ = cv2.findContours(plate_img, mode=cv2.RETR_LIST, method=cv2.CHAIN_APPROX_SIMPLE)                    
                    plate_min_x, plate_min_y = plate_img.shape[1], plate_img.shape[0]
                    plate_max_x, plate_max_y = 0, 0

                    for contour in contours:
                        x, y, w, h = cv2.boundingRect(contour)
                        
                        area = w * h
                        ratio = w / h

                        if area > MIN_AREA \
                        and w > MIN_WIDTH and h > MIN_HEIGHT \
                        and MIN_RATIO < ratio < MAX_RATIO:
                            if x < plate_min_x:
                                plate_min_x = x
                            if y < plate_min_y:
                                plate_min_y = y
                            if x + w > plate_max_x:
                                plate_max_x = x + w
                            if y + h > plate_max_y:
                                plate_max_y = y + h
                                    
                    img_result = plate_img[plate_min_y:plate_max_y, plate_min_x:plate_max_x]                    
                    img_result = cv2.GaussianBlur(img_result, ksize=(3, 3), sigmaX=0)
                    _, img_result = cv2.threshold(img_result, thresh=0.0, maxval=255.0, type=cv2.THRESH_BINARY | cv2.THRESH_OTSU)
                    img_result = cv2.copyMakeBorder(img_result, top=10, bottom=10, left=10, right=10, borderType=cv2.BORDER_CONSTANT, value=(0,0,0))                    
                    pytesseract.pytesseract.tesseract_cmd = "/usr/bin/tesseract"
                    chars = pytesseract.image_to_string(img_result, lang='kor', config='--psm 7 --oem 0')
                    
                    webcam.release()
                    
                    result_chars = ''
                    has_digit = False
                    for c in chars:
                        if ord('가') <= ord(c) <= ord('힣') or c.isdigit():
                            if c.isdigit():
                                has_digit = True
                            result_chars += c
                    
    #                     print(result_chars)
                    plate_chars.append(result_chars)

                    if has_digit and len(result_chars) > longest_text:
                        longest_idx = i
                     
                    #result_chars = result_chars.replace("ㆍ","").replace("","").replace("\n", "")

#                 cv2.imshow("blurred", temp_result)
#                 인식된 번호판 텍스트를 출력합니다.
#                 print("인식된 번호판:", result_chars)

#                 result_chars = plate_text
#                 result_chars = result_chars.replace("ㆍ","").replace("","").replace("\n", "")

                info_into_db = result_chars                
#                 print("인식된 번호판:"+ result_chars)
                
                if now == 4:
                    pi.set_servo_pulsewidth(servo_pin, servo_set)  
                    now = 4
#                     ti_loop(now)                                                                                                                                                     
                    send_command(0x01)
                    write(6,1, 'parking')
                    write(2,2, 'space is full!!')
                    sleep()
                    send_command(0x01)
                else:                    
                    now = now + 1       
#                     ti_loop(now)
                    pi.set_servo_pulsewidth(servo_pin, 1650)
                    update_info = ("update area_info set car_no = '"+ info_into_db +"' where area_no = " + str(now))
                    cursor.execute(update_info, )
                    parking_db.commit()
#                     write(0,3, str(info_into_db)+" Welcome ")
                    print("현재 차량:"+str(now))
                    print("데이터베이스에 저장됨\n"+ info_into_db)                                        
                    sleep()
                    
#OSP part                    
            if osp_value == GPIO.HIGH:  # 장애물이 감지되지 않으면
                pi.set_servo_pulsewidth(servo_pin, servo_set)  # 서보 모터를 0도로 회전
                time.sleep(0.5)
                
            elif osp_value == GPIO.LOW:	# 장애물이 감지되면
                
                webcam = cv2.VideoCapture(0)
                ret, frame = webcam.read()
                cv2.imwrite('test_image.jpg', frame)                
                img_ori = cv2.imread('test_image.jpg')
                height, width, channel = img_ori.shape
                gray = cv2.cvtColor(img_ori, cv2.COLOR_BGR2GRAY)
                img_blurred = cv2.GaussianBlur(gray, ksize=(5, 5), sigmaX=0)
                
                img_blur_thresh = cv2.adaptiveThreshold(
                    img_blurred,
                    maxValue=255.0,
                    adaptiveMethod=cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
                    thresholdType=cv2.THRESH_BINARY_INV,
                    blockSize=19,
                    C=9
                )

                img_thresh = cv2.adaptiveThreshold(
                    gray,
                    maxValue=255.0,
                    adaptiveMethod=cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
                    thresholdType=cv2.THRESH_BINARY_INV,
                    blockSize=19,
                    C=9
                )

                contours, _ = cv2.findContours(
                    img_blur_thresh,
                    mode=cv2.RETR_LIST,
                    method=cv2.CHAIN_APPROX_SIMPLE
                )

                temp_result = np.zeros((height, width, channel), dtype=np.uint8)
                cv2.drawContours(temp_result, contours=contours, contourIdx=-1, color=(255,255,255))
                temp_result = np.zeros((height, width, channel), dtype=np.uint8)
                contours_dict = []

                for contour in contours:
                    x, y, w, h = cv2.boundingRect(contour)
                    cv2.rectangle(temp_result, pt1=(x,y), pt2=(x+w, y+h), color=(255,255,255), thickness=2)
                    
                    contours_dict.append({
                        'contour': contour,
                        'x': x,
                        'y': y,
                        'w': w,
                        'h': h,
                        'cx': x + (w / 2),
                        'cy': y + (h / 2)
                    })
                    
                MIN_AREA = 80
                MIN_WIDTH, MIN_HEIGHT=2, 8
                MIN_RATIO, MAX_RATIO = 0.25, 1.0

                possible_contours = []

                cnt = 0
                for d in contours_dict:
                    area = d['w'] * d['h']
                    ratio = d['w'] / d['h']
                    
                    if area > MIN_AREA \
                    and d['w'] > MIN_WIDTH and d['h'] > MIN_HEIGHT \
                    and MIN_RATIO < ratio < MAX_RATIO:
                        d['idx'] = cnt
                        cnt += 1
                        possible_contours.append(d)

                temp_result = np.zeros((height, width, channel), dtype = np.uint8)

                for d in possible_contours:
                    cv2.rectangle(temp_result, pt1=(d['x'], d['y']), pt2=(d['x']+d['w'], d['y']+d['h']), color=(255, 255, 255), thickness=2)
                    
                MAX_DIAG_MULTIPLYER = 5
                MAX_ANGLE_DIFF = 12.0
                MAX_AREA_DIFF = 0.5
                MAX_WIDTH_DIFF = 0.8
                MAX_HEIGHT_DIFF = 0.2
                MIN_N_MATCHED = 3

                def find_chars(contour_list):
                    matched_result_idx = []
                    
                    for d1 in contour_list:
                        matched_contours_idx = []
                        for d2 in contour_list:
                            if d1['idx'] == d2['idx']:
                                continue
                                
                            dx = abs(d1['cx'] - d2['cx'])
                            dy = abs(d1['cy'] - d2['cy'])                            
                            diagonal_length1 = np.sqrt(d1['w'] ** 2 + d1['h'] ** 2)                            
                            distance = np.linalg.norm(np.array([d1['cx'], d1['cy']]) - np.array([d2['cx'], d2['cy']]))
                            
                            if dx == 0:
                                angle_diff = 90
                            else:
                                angle_diff = np.degrees(np.arctan(dy / dx))
                            area_diff = abs(d1['w'] * d1['h'] - d2['w'] * d2['h']) / (d1['w'] * d1['h'])
                            width_diff = abs(d1['w'] - d2['w']) / d1['w']
                            height_diff = abs(d1['h'] - d2['h']) / d1['h']
                            
                            if distance < diagonal_length1 * MAX_DIAG_MULTIPLYER \
                            and angle_diff < MAX_ANGLE_DIFF and area_diff < MAX_AREA_DIFF \
                            and width_diff < MAX_WIDTH_DIFF and height_diff < MAX_HEIGHT_DIFF:
                                matched_contours_idx.append(d2['idx'])
                                
                        matched_contours_idx.append(d1['idx'])
                        
                        if len(matched_contours_idx) < MIN_N_MATCHED:
                            continue
                            
                        matched_result_idx.append(matched_contours_idx)
                        
                        unmatched_contour_idx = []
                        for d4 in contour_list:
                            if d4['idx'] not in matched_contours_idx:
                                unmatched_contour_idx.append(d4['idx'])
                        
                        unmatched_contour = np.take(possible_contours, unmatched_contour_idx)
                        
                        recursive_contour_list = find_chars(unmatched_contour)
                        
                        for idx in recursive_contour_list:
                            matched_result_idx.append(idx)
                            
                        break
                        
                    return matched_result_idx

                result_idx = find_chars(possible_contours)

                matched_result = []
                for idx_list in result_idx:
                    matched_result.append(np.take(possible_contours, idx_list))
                    
                temp_result = np.zeros((height, width, channel), dtype=np.uint8)

                for r in matched_result:
                    for d in r:
                        cv2.rectangle(temp_result, pt1=(d['x'], d['y']), pt2=(d['x']+d['w'], d['y']+d['h']), color=(255,255,255), thickness=2)

                PLATE_WIDTH_PADDING = 1.3 # 1.3
                PLATE_HEIGHT_PADDING = 1.5 # 1.5
                MIN_PLATE_RATIO = 3
                MAX_PLATE_RATIO = 10
                plate_imgs = []
                plate_infos = []

                for i, matched_chars in enumerate(matched_result):
                    sorted_chars = sorted(matched_chars, key=lambda x: x['cx'])

                    plate_cx = (sorted_chars[0]['cx'] + sorted_chars[-1]['cx']) / 2
                    plate_cy = (sorted_chars[0]['cy'] + sorted_chars[-1]['cy']) / 2
                    
                    plate_width = (sorted_chars[-1]['x'] + sorted_chars[-1]['w'] - sorted_chars[0]['x']) * PLATE_WIDTH_PADDING
                    
                    sum_height = 0
                    for d in sorted_chars:
                        sum_height += d['h']

                    plate_height = int(sum_height / len(sorted_chars) * PLATE_HEIGHT_PADDING)
                    
                    triangle_height = sorted_chars[-1]['cy'] - sorted_chars[0]['cy']
                    triangle_hypotenus = np.linalg.norm(
                        np.array([sorted_chars[0]['cx'], sorted_chars[0]['cy']]) - 
                        np.array([sorted_chars[-1]['cx'], sorted_chars[-1]['cy']])
                    )
                    
                    angle = np.degrees(np.arcsin(triangle_height / triangle_hypotenus))
                    
                    rotation_matrix = cv2.getRotationMatrix2D(center=(plate_cx, plate_cy), angle=angle, scale=1.0)
                    
                    img_rotated = cv2.warpAffine(img_thresh, M=rotation_matrix, dsize=(width, height))
                    
                    img_cropped = cv2.getRectSubPix(
                        img_rotated, 
                        patchSize=(int(plate_width), int(plate_height)), 
                        center=(int(plate_cx), int(plate_cy))
                    )
                    
                    if img_cropped.shape[1] / img_cropped.shape[0] < MIN_PLATE_RATIO or img_cropped.shape[1] / img_cropped.shape[0] < MIN_PLATE_RATIO > MAX_PLATE_RATIO:
                        continue
                    
                    plate_imgs.append(img_cropped)
                    plate_infos.append({
                        'x': int(plate_cx - plate_width / 2),
                        'y': int(plate_cy - plate_height / 2),
                        'w': int(plate_width),
                        'h': int(plate_height)
                    })
                    
                longest_idx, longest_text = -1, 0
                plate_chars = []

                for i, plate_img in enumerate(plate_imgs):
                    plate_img = cv2.resize(plate_img, dsize=(0, 0), fx=1.6, fy=1.6)
                    _, plate_img = cv2.threshold(plate_img, thresh=0.0, maxval=255.0, type=cv2.THRESH_BINARY | cv2.THRESH_OTSU)
                    
                    # find contours again (same as above)
                    contours, _ = cv2.findContours(plate_img, mode=cv2.RETR_LIST, method=cv2.CHAIN_APPROX_SIMPLE)                    
                    plate_min_x, plate_min_y = plate_img.shape[1], plate_img.shape[0]
                    plate_max_x, plate_max_y = 0, 0

                    for contour in contours:
                        x, y, w, h = cv2.boundingRect(contour)                        
                        area = w * h
                        ratio = w / h

                        if area > MIN_AREA \
                        and w > MIN_WIDTH and h > MIN_HEIGHT \
                        and MIN_RATIO < ratio < MAX_RATIO:
                            if x < plate_min_x:
                                plate_min_x = x
                            if y < plate_min_y:
                                plate_min_y = y
                            if x + w > plate_max_x:
                                plate_max_x = x + w
                            if y + h > plate_max_y:
                                plate_max_y = y + h
                                
                    img_result = plate_img[plate_min_y:plate_max_y, plate_min_x:plate_max_x]                    
                    img_result = cv2.GaussianBlur(img_result, ksize=(3, 3), sigmaX=0)
                    _, img_result = cv2.threshold(img_result, thresh=0.0, maxval=255.0, type=cv2.THRESH_BINARY | cv2.THRESH_OTSU)
                    img_result = cv2.copyMakeBorder(img_result, top=10, bottom=10, left=10, right=10, borderType=cv2.BORDER_CONSTANT, value=(0,0,0))                    
                    pytesseract.pytesseract.tesseract_cmd = "/usr/bin/tesseract"
                    chars = pytesseract.image_to_string(img_result, lang='kor', config='--psm 7 --oem 0')
                    
                    webcam.release()
                    
                    result_chars = ''
                    has_digit = False
                    for c in chars:
                        if ord('가') <= ord(c) <= ord('힣') or c.isdigit():
                            if c.isdigit():
                                has_digit = True
                            result_chars += c
                    
                    print("출차:"+ result_chars)
                    plate_chars.append(result_chars)

                    if has_digit and len(result_chars) > longest_text:
                        longest_idx = i
                     
                    #result_chars = result_chars.replace("ㆍ","").replace("","").replace("\n", "")
#                     update_info = ("delete from area_info where area_no =" + str(now))
#                     cursor.execute(update_info, )
#                     parking_db.commit()
#car_out###############                
                if now == 0:
                    pi.set_servo_pulsewidth(servo_pin, 1650)  
                    now = 0
                    write(0,3, str(result_chars) + " Good Bye")
                    sleep()
                
                else:
                    now = now - 1
                    update_info = ("update area_info set car_no=' ' where car_no ='" + str(result_chars)+"'")
                    cursor.execute(update_info, )
                    parking_db.commit()
                    print("현재 차량:"+str(now))
                    pi.set_servo_pulsewidth(servo_pin, 1650)                    
#                     write(0,3, str(result_chars)+" Good Bye")
                    sleep()

    except KeyboardInterrupt:
        pass
##gui.mainloop()
pi.set_servo_pulsewidth(servo_pin, 0)  # 서보 모터 정지
pi.stop()
GPIO.cleanup()

cv2.waitKey(0)
cv2.destroyAllWindows()

